CCS PCM C Compiler, Version 5.015, 5967               30-jun.-21 21:07

               Filename:   C:\Users\Luis Flores\Documents\II PERIODO 2021\MICROCONTROLADORES\Proyecto - Luis Flores\Codigo\CircuitoC.lst

               ROM used:   510 words (6%)
                           Largest free fragment is 2048
               RAM used:   7 (2%) at main() level
                           10 (3%) worst case
               Stack used: 1 locations
               Stack size: 8

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   027
0003:  NOP
.................... #include <16f886.h> 
.................... //////////// Standard Header file for the PIC16F886 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F886 
0004:  BCF    0A.0
0005:  BCF    0A.1
0006:  BCF    0A.2
0007:  ADDWF  02,F
0008:  RETLW  3F
0009:  RETLW  06
000A:  RETLW  5B
000B:  RETLW  4F
000C:  RETLW  66
000D:  RETLW  6D
000E:  RETLW  7D
000F:  RETLW  07
0010:  RETLW  7F
0011:  RETLW  6F
*
01E4:  BSF    0A.0
01E5:  BCF    0A.1
01E6:  BCF    0A.2
01E7:  ADDWF  02,F
01E8:  GOTO   05C
01E9:  GOTO   073
01EA:  GOTO   08B
01EB:  GOTO   0A3
01EC:  GOTO   0BB
01ED:  GOTO   0D3
01EE:  GOTO   0EB
01EF:  GOTO   103
01F0:  GOTO   11B
01F1:  BSF    0A.0
01F2:  BCF    0A.1
01F3:  BCF    0A.2
01F4:  ADDWF  02,F
01F5:  GOTO   143
01F6:  GOTO   153
01F7:  GOTO   164
01F8:  GOTO   174
01F9:  GOTO   185
01FA:  GOTO   195
01FB:  GOTO   1A5
01FC:  GOTO   1B5
01FD:  GOTO   1C5
....................  
.................... #list 
....................  
.................... #Fuses XT,NOPROTECT,NOWDT,NOBROWNOUT,PUT,NOLVP       
.................... #use delay(clock= 4M) 
*
0012:  MOVLW  24
0013:  MOVWF  04
0014:  BCF    03.7
0015:  MOVF   00,W
0016:  BTFSC  03.2
0017:  GOTO   026
0018:  MOVLW  01
0019:  MOVWF  78
001A:  CLRF   77
001B:  DECFSZ 77,F
001C:  GOTO   01B
001D:  DECFSZ 78,F
001E:  GOTO   01A
001F:  MOVLW  4A
0020:  MOVWF  77
0021:  DECFSZ 77,F
0022:  GOTO   021
0023:  GOTO   024
0024:  DECFSZ 00,F
0025:  GOTO   018
0026:  RETURN
.................... #byte portB = 0x06 
.................... #byte portA = 0x05 
.................... #byte tris_a = 0x85 
.................... #byte tris_b = 0x86 
....................  
.................... byte const miDisplay[10] = {0x3f,0x06,0x5b,0x4f,0x66,0x6d,0x7d,0x07,0x7f,0x6f}; 
....................  
.................... void main() 
0027:  MOVF   03,W
0028:  ANDLW  1F
0029:  MOVWF  03
002A:  MOVLW  FF
002B:  MOVWF  20
002C:  BSF    03.5
002D:  BSF    03.6
002E:  MOVF   09,W
002F:  ANDLW  C0
0030:  MOVWF  09
0031:  BCF    03.6
0032:  BCF    1F.4
0033:  BCF    1F.5
0034:  MOVLW  00
0035:  BSF    03.6
0036:  MOVWF  08
0037:  BCF    03.5
0038:  CLRF   07
0039:  CLRF   08
003A:  CLRF   09
003B:  BCF    03.7
.................... { 
....................  
.................... tris_b= 0x00; 
003C:  BSF    03.5
003D:  BCF    03.6
003E:  CLRF   06
.................... //tris_a = 0xFF; 
.................... portB = 0x00; 
003F:  BCF    03.5
0040:  CLRF   06
.................... bit_set(tris_a,0); 
0041:  BSF    03.5
0042:  BSF    05.0
.................... output_c(0x00); 
0043:  MOVLW  00
0044:  BCF    03.5
0045:  MOVWF  20
0046:  BSF    03.5
0047:  CLRF   07
0048:  BCF    03.5
0049:  CLRF   07
.................... int i=0,j=0; 
004A:  CLRF   21
004B:  CLRF   22
.................... set_tris_c(0x00);  
004C:  BSF    03.5
004D:  MOVWF  07
004E:  BCF    03.5
004F:  MOVWF  20
.................... set_tris_a(0xFF); 
0050:  MOVLW  FF
0051:  BSF    03.5
0052:  MOVWF  05
....................  
.................... while(true) 
.................... { 
....................  
.................... if(bit_test(portA,0)==1) 
0053:  BCF    03.5
0054:  BTFSS  05.0
0055:  GOTO   132
.................... { 
....................   switch(i) 
0056:  MOVF   21,W
0057:  ADDLW  F7
0058:  BTFSC  03.0
0059:  GOTO   132
005A:  ADDLW  09
005B:  GOTO   1E4
....................   { 
....................     case 0: 
....................            output_b(miDisplay[i]); 
005C:  MOVF   21,W
005D:  CALL   004
005E:  MOVWF  23
005F:  BSF    03.5
0060:  CLRF   06
0061:  BCF    03.5
0062:  MOVF   23,W
0063:  MOVWF  06
....................            output_c(0x00); 
0064:  MOVLW  00
0065:  MOVWF  20
0066:  BSF    03.5
0067:  CLRF   07
0068:  BCF    03.5
0069:  CLRF   07
....................            delay_ms(1500); 
006A:  MOVLW  06
006B:  MOVWF  23
006C:  MOVLW  FA
006D:  MOVWF  24
006E:  CALL   012
006F:  DECFSZ 23,F
0070:  GOTO   06C
....................            
....................            i++; 
0071:  INCF   21,F
....................     break; 
0072:  GOTO   132
....................     case 1: 
....................            output_b(miDisplay[i]); 
0073:  MOVF   21,W
0074:  CALL   004
0075:  MOVWF  23
0076:  BSF    03.5
0077:  CLRF   06
0078:  BCF    03.5
0079:  MOVF   23,W
007A:  MOVWF  06
....................            output_c(0b01000000); 
007B:  MOVLW  00
007C:  MOVWF  20
007D:  BSF    03.5
007E:  CLRF   07
007F:  MOVLW  40
0080:  BCF    03.5
0081:  MOVWF  07
....................            delay_ms(1500); 
0082:  MOVLW  06
0083:  MOVWF  23
0084:  MOVLW  FA
0085:  MOVWF  24
0086:  CALL   012
0087:  DECFSZ 23,F
0088:  GOTO   084
....................             
....................            i++; 
0089:  INCF   21,F
....................     break; 
008A:  GOTO   132
....................     case 2: 
....................            output_b(miDisplay[i]); 
008B:  MOVF   21,W
008C:  CALL   004
008D:  MOVWF  23
008E:  BSF    03.5
008F:  CLRF   06
0090:  BCF    03.5
0091:  MOVF   23,W
0092:  MOVWF  06
....................            output_c(0b00100000); 
0093:  MOVLW  00
0094:  MOVWF  20
0095:  BSF    03.5
0096:  CLRF   07
0097:  MOVLW  20
0098:  BCF    03.5
0099:  MOVWF  07
....................            delay_ms(1500); 
009A:  MOVLW  06
009B:  MOVWF  23
009C:  MOVLW  FA
009D:  MOVWF  24
009E:  CALL   012
009F:  DECFSZ 23,F
00A0:  GOTO   09C
....................            i++; 
00A1:  INCF   21,F
....................     break; 
00A2:  GOTO   132
....................     case 3: 
....................            output_b(miDisplay[i]); 
00A3:  MOVF   21,W
00A4:  CALL   004
00A5:  MOVWF  23
00A6:  BSF    03.5
00A7:  CLRF   06
00A8:  BCF    03.5
00A9:  MOVF   23,W
00AA:  MOVWF  06
....................            output_c(0b00010000); 
00AB:  MOVLW  00
00AC:  MOVWF  20
00AD:  BSF    03.5
00AE:  CLRF   07
00AF:  MOVLW  10
00B0:  BCF    03.5
00B1:  MOVWF  07
....................            delay_ms(1500); 
00B2:  MOVLW  06
00B3:  MOVWF  23
00B4:  MOVLW  FA
00B5:  MOVWF  24
00B6:  CALL   012
00B7:  DECFSZ 23,F
00B8:  GOTO   0B4
....................            i++; 
00B9:  INCF   21,F
....................     break; 
00BA:  GOTO   132
....................     case 4: 
....................            output_b(miDisplay[i]); 
00BB:  MOVF   21,W
00BC:  CALL   004
00BD:  MOVWF  23
00BE:  BSF    03.5
00BF:  CLRF   06
00C0:  BCF    03.5
00C1:  MOVF   23,W
00C2:  MOVWF  06
....................            output_c(0b00010000); 
00C3:  MOVLW  00
00C4:  MOVWF  20
00C5:  BSF    03.5
00C6:  CLRF   07
00C7:  MOVLW  10
00C8:  BCF    03.5
00C9:  MOVWF  07
....................            delay_ms(1500); 
00CA:  MOVLW  06
00CB:  MOVWF  23
00CC:  MOVLW  FA
00CD:  MOVWF  24
00CE:  CALL   012
00CF:  DECFSZ 23,F
00D0:  GOTO   0CC
....................            i++; 
00D1:  INCF   21,F
....................     break; 
00D2:  GOTO   132
....................     case 5: 
....................            output_b(miDisplay[i]); 
00D3:  MOVF   21,W
00D4:  CALL   004
00D5:  MOVWF  23
00D6:  BSF    03.5
00D7:  CLRF   06
00D8:  BCF    03.5
00D9:  MOVF   23,W
00DA:  MOVWF  06
....................            output_c(0b00001000); 
00DB:  MOVLW  00
00DC:  MOVWF  20
00DD:  BSF    03.5
00DE:  CLRF   07
00DF:  MOVLW  08
00E0:  BCF    03.5
00E1:  MOVWF  07
....................            delay_ms(1500); 
00E2:  MOVLW  06
00E3:  MOVWF  23
00E4:  MOVLW  FA
00E5:  MOVWF  24
00E6:  CALL   012
00E7:  DECFSZ 23,F
00E8:  GOTO   0E4
....................            i++; 
00E9:  INCF   21,F
....................     break; 
00EA:  GOTO   132
....................       case 6: 
....................            output_b(miDisplay[i]); 
00EB:  MOVF   21,W
00EC:  CALL   004
00ED:  MOVWF  23
00EE:  BSF    03.5
00EF:  CLRF   06
00F0:  BCF    03.5
00F1:  MOVF   23,W
00F2:  MOVWF  06
....................             output_c(0b00000100); 
00F3:  MOVLW  00
00F4:  MOVWF  20
00F5:  BSF    03.5
00F6:  CLRF   07
00F7:  MOVLW  04
00F8:  BCF    03.5
00F9:  MOVWF  07
....................            delay_ms(1500); 
00FA:  MOVLW  06
00FB:  MOVWF  23
00FC:  MOVLW  FA
00FD:  MOVWF  24
00FE:  CALL   012
00FF:  DECFSZ 23,F
0100:  GOTO   0FC
....................            i++; 
0101:  INCF   21,F
....................     break; 
0102:  GOTO   132
....................      
....................       case 7: 
....................            output_b(miDisplay[i]); 
0103:  MOVF   21,W
0104:  CALL   004
0105:  MOVWF  23
0106:  BSF    03.5
0107:  CLRF   06
0108:  BCF    03.5
0109:  MOVF   23,W
010A:  MOVWF  06
....................             output_c(0b00000010); 
010B:  MOVLW  00
010C:  MOVWF  20
010D:  BSF    03.5
010E:  CLRF   07
010F:  MOVLW  02
0110:  BCF    03.5
0111:  MOVWF  07
....................            delay_ms(1500); 
0112:  MOVLW  06
0113:  MOVWF  23
0114:  MOVLW  FA
0115:  MOVWF  24
0116:  CALL   012
0117:  DECFSZ 23,F
0118:  GOTO   114
....................            i++; 
0119:  INCF   21,F
....................     break; 
011A:  GOTO   132
....................      
....................      case 8: 
....................            output_b(miDisplay[i]); 
011B:  MOVF   21,W
011C:  CALL   004
011D:  MOVWF  23
011E:  BSF    03.5
011F:  CLRF   06
0120:  BCF    03.5
0121:  MOVF   23,W
0122:  MOVWF  06
....................             output_c(0b00000001); 
0123:  MOVLW  00
0124:  MOVWF  20
0125:  BSF    03.5
0126:  CLRF   07
0127:  MOVLW  01
0128:  BCF    03.5
0129:  MOVWF  07
....................            delay_ms(1500); 
012A:  MOVLW  06
012B:  MOVWF  23
012C:  MOVLW  FA
012D:  MOVWF  24
012E:  CALL   012
012F:  DECFSZ 23,F
0130:  GOTO   12C
....................            i++; 
0131:  INCF   21,F
....................     break; 
....................   } 
....................  
.................... } 
....................  
.................... if(bit_test(portA,1)==1) 
0132:  BTFSS  05.1
0133:  GOTO   1D9
.................... { 
....................  
.................... if(i == 0) 
0134:  MOVF   21,F
0135:  BTFSS  03.2
0136:  GOTO   13A
.................... { 
....................    j = i; 
0137:  MOVF   21,W
0138:  MOVWF  22
.................... } 
0139:  GOTO   13D
.................... else 
.................... { 
....................    j=i-1; 
013A:  MOVLW  01
013B:  SUBWF  21,W
013C:  MOVWF  22
.................... } 
....................   switch(j) 
013D:  MOVF   22,W
013E:  ADDLW  F7
013F:  BTFSC  03.0
0140:  GOTO   1D4
0141:  ADDLW  09
0142:  GOTO   1F1
....................   { 
....................     case 0: 
....................            output_b(miDisplay[j]); 
0143:  MOVF   22,W
0144:  CALL   004
0145:  MOVWF  23
0146:  BSF    03.5
0147:  CLRF   06
0148:  BCF    03.5
0149:  MOVF   23,W
014A:  MOVWF  06
....................            delay_ms(1500); 
014B:  MOVLW  06
014C:  MOVWF  23
014D:  MOVLW  FA
014E:  MOVWF  24
014F:  CALL   012
0150:  DECFSZ 23,F
0151:  GOTO   14D
....................             
....................     break; 
0152:  GOTO   1D4
....................     case 1: 
....................            output_b(miDisplay[j]); 
0153:  MOVF   22,W
0154:  CALL   004
0155:  MOVWF  23
0156:  BSF    03.5
0157:  CLRF   06
0158:  BCF    03.5
0159:  MOVF   23,W
015A:  MOVWF  06
....................            delay_ms(1500); 
015B:  MOVLW  06
015C:  MOVWF  23
015D:  MOVLW  FA
015E:  MOVWF  24
015F:  CALL   012
0160:  DECFSZ 23,F
0161:  GOTO   15D
....................            j--; 
0162:  DECF   22,F
....................     break; 
0163:  GOTO   1D4
....................     case 2: 
....................            output_b(miDisplay[j]); 
0164:  MOVF   22,W
0165:  CALL   004
0166:  MOVWF  23
0167:  BSF    03.5
0168:  CLRF   06
0169:  BCF    03.5
016A:  MOVF   23,W
016B:  MOVWF  06
....................            delay_ms(1500); 
016C:  MOVLW  06
016D:  MOVWF  23
016E:  MOVLW  FA
016F:  MOVWF  24
0170:  CALL   012
0171:  DECFSZ 23,F
0172:  GOTO   16E
....................             
....................     break; 
0173:  GOTO   1D4
....................     case 3: 
....................            output_b(miDisplay[j]); 
0174:  MOVF   22,W
0175:  CALL   004
0176:  MOVWF  23
0177:  BSF    03.5
0178:  CLRF   06
0179:  BCF    03.5
017A:  MOVF   23,W
017B:  MOVWF  06
....................            delay_ms(1500); 
017C:  MOVLW  06
017D:  MOVWF  23
017E:  MOVLW  FA
017F:  MOVWF  24
0180:  CALL   012
0181:  DECFSZ 23,F
0182:  GOTO   17E
....................            j--; 
0183:  DECF   22,F
....................     break; 
0184:  GOTO   1D4
....................     case 4: 
....................            output_b(miDisplay[j]); 
0185:  MOVF   22,W
0186:  CALL   004
0187:  MOVWF  23
0188:  BSF    03.5
0189:  CLRF   06
018A:  BCF    03.5
018B:  MOVF   23,W
018C:  MOVWF  06
....................            delay_ms(1500); 
018D:  MOVLW  06
018E:  MOVWF  23
018F:  MOVLW  FA
0190:  MOVWF  24
0191:  CALL   012
0192:  DECFSZ 23,F
0193:  GOTO   18F
....................             
....................     break; 
0194:  GOTO   1D4
....................     case 5: 
....................            output_b(miDisplay[j]); 
0195:  MOVF   22,W
0196:  CALL   004
0197:  MOVWF  23
0198:  BSF    03.5
0199:  CLRF   06
019A:  BCF    03.5
019B:  MOVF   23,W
019C:  MOVWF  06
....................            delay_ms(1500); 
019D:  MOVLW  06
019E:  MOVWF  23
019F:  MOVLW  FA
01A0:  MOVWF  24
01A1:  CALL   012
01A2:  DECFSZ 23,F
01A3:  GOTO   19F
....................             
....................     break; 
01A4:  GOTO   1D4
....................       case 6: 
....................            output_b(miDisplay[j]); 
01A5:  MOVF   22,W
01A6:  CALL   004
01A7:  MOVWF  23
01A8:  BSF    03.5
01A9:  CLRF   06
01AA:  BCF    03.5
01AB:  MOVF   23,W
01AC:  MOVWF  06
....................            delay_ms(1500); 
01AD:  MOVLW  06
01AE:  MOVWF  23
01AF:  MOVLW  FA
01B0:  MOVWF  24
01B1:  CALL   012
01B2:  DECFSZ 23,F
01B3:  GOTO   1AF
....................             
....................     break; 
01B4:  GOTO   1D4
....................      
....................       case 7: 
....................            output_b(miDisplay[j]); 
01B5:  MOVF   22,W
01B6:  CALL   004
01B7:  MOVWF  23
01B8:  BSF    03.5
01B9:  CLRF   06
01BA:  BCF    03.5
01BB:  MOVF   23,W
01BC:  MOVWF  06
....................            delay_ms(1500); 
01BD:  MOVLW  06
01BE:  MOVWF  23
01BF:  MOVLW  FA
01C0:  MOVWF  24
01C1:  CALL   012
01C2:  DECFSZ 23,F
01C3:  GOTO   1BF
....................             
....................     break; 
01C4:  GOTO   1D4
....................      
....................      case 8: 
....................            output_b(miDisplay[j]); 
01C5:  MOVF   22,W
01C6:  CALL   004
01C7:  MOVWF  23
01C8:  BSF    03.5
01C9:  CLRF   06
01CA:  BCF    03.5
01CB:  MOVF   23,W
01CC:  MOVWF  06
....................            delay_ms(1500); 
01CD:  MOVLW  06
01CE:  MOVWF  23
01CF:  MOVLW  FA
01D0:  MOVWF  24
01D1:  CALL   012
01D2:  DECFSZ 23,F
01D3:  GOTO   1CF
....................            
....................     break; 
....................   } 
....................   
....................    
.................... output_b(miDisplay[4]); 
01D4:  BSF    03.5
01D5:  CLRF   06
01D6:  MOVLW  66
01D7:  BCF    03.5
01D8:  MOVWF  06
.................... } 
....................  
.................... if(i==9) 
01D9:  MOVF   21,W
01DA:  SUBLW  09
01DB:  BTFSC  03.2
.................... { 
....................   i=0; 
01DC:  CLRF   21
....................    
.................... } 
....................  
.................... if(j <= 0) 
01DD:  MOVF   22,F
01DE:  BTFSS  03.2
01DF:  GOTO   1E2
.................... { 
....................   j=8; 
01E0:  MOVLW  08
01E1:  MOVWF  22
.................... } 
01E2:  GOTO   054
....................  
.................... } 
....................  
....................  
.................... } 
01E3:  SLEEP

Configuration Fuses:
   Word  1: 2CE1   XT NOWDT PUT MCLR NOPROTECT NOCPD NOBROWNOUT IESO FCMEN NOLVP NODEBUG
   Word  2: 3FFF   BORV40 NOWRT
