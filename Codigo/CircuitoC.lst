CCS PCM C Compiler, Version 5.015, 5967               30-jun.-21 21:49

               Filename:   C:\Users\Luis Flores\Documents\II PERIODO 2021\MICROCONTROLADORES\Proyecto - Luis Flores\Codigo\CircuitoC.lst

               ROM used:   505 words (6%)
                           Largest free fragment is 2048
               RAM used:   7 (2%) at main() level
                           9 (2%) worst case
               Stack used: 1 locations
               Stack size: 8

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   027
0003:  NOP
.................... #include <16f886.h> 
.................... //////////// Standard Header file for the PIC16F886 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F886 
0004:  BCF    0A.0
0005:  BCF    0A.1
0006:  BCF    0A.2
0007:  ADDWF  02,F
0008:  RETLW  3F
0009:  RETLW  06
000A:  RETLW  5B
000B:  RETLW  4F
000C:  RETLW  66
000D:  RETLW  6D
000E:  RETLW  7D
000F:  RETLW  07
0010:  RETLW  7F
0011:  RETLW  6F
*
01EC:  BSF    0A.0
01ED:  BCF    0A.1
01EE:  BCF    0A.2
01EF:  ADDWF  02,F
01F0:  GOTO   05D
01F1:  GOTO   070
01F2:  GOTO   084
01F3:  GOTO   098
01F4:  GOTO   0AC
01F5:  GOTO   0C0
01F6:  GOTO   0D4
01F7:  GOTO   0E8
01F8:  GOTO   0FC
....................  
.................... #list 
....................  
.................... #Fuses XT,NOPROTECT,NOWDT,NOBROWNOUT,PUT,NOLVP       
.................... #use delay(clock= 4M) 
*
0012:  MOVLW  23
0013:  MOVWF  04
0014:  BCF    03.7
0015:  MOVF   00,W
0016:  BTFSC  03.2
0017:  GOTO   026
0018:  MOVLW  01
0019:  MOVWF  78
001A:  CLRF   77
001B:  DECFSZ 77,F
001C:  GOTO   01B
001D:  DECFSZ 78,F
001E:  GOTO   01A
001F:  MOVLW  4A
0020:  MOVWF  77
0021:  DECFSZ 77,F
0022:  GOTO   021
0023:  GOTO   024
0024:  DECFSZ 00,F
0025:  GOTO   018
0026:  RETURN
.................... #byte portB = 0x06 
.................... #byte portA = 0x05 
.................... #byte tris_a = 0x85 
.................... #byte tris_b = 0x86 
....................  
.................... byte const miDisplay[10] = {0x3f,0x06,0x5b,0x4f,0x66,0x6d,0x7d,0x07,0x7f,0x6f}; 
....................  
.................... void main() 
0027:  MOVF   03,W
0028:  ANDLW  1F
0029:  MOVWF  03
002A:  MOVLW  FF
002B:  MOVWF  20
002C:  BSF    03.5
002D:  BSF    03.6
002E:  MOVF   09,W
002F:  ANDLW  C0
0030:  MOVWF  09
0031:  BCF    03.6
0032:  BCF    1F.4
0033:  BCF    1F.5
0034:  MOVLW  00
0035:  BSF    03.6
0036:  MOVWF  08
0037:  BCF    03.5
0038:  CLRF   07
0039:  CLRF   08
003A:  CLRF   09
003B:  BCF    03.7
.................... { 
....................  
.................... tris_b= 0x00; 
003C:  BSF    03.5
003D:  BCF    03.6
003E:  CLRF   06
.................... //tris_a = 0xFF; 
.................... portB = 0x00; 
003F:  BCF    03.5
0040:  CLRF   06
.................... bit_set(tris_a,0); 
0041:  BSF    03.5
0042:  BSF    05.0
.................... output_c(0x00); 
0043:  MOVLW  00
0044:  BCF    03.5
0045:  MOVWF  20
0046:  BSF    03.5
0047:  CLRF   07
0048:  BCF    03.5
0049:  CLRF   07
.................... int i=0; 
004A:  CLRF   21
.................... set_tris_c(0x00);  
004B:  BSF    03.5
004C:  MOVWF  07
004D:  BCF    03.5
004E:  MOVWF  20
.................... set_tris_a(0xFF); 
004F:  MOVLW  FF
0050:  BSF    03.5
0051:  MOVWF  05
.................... int Tiempo = 1500; 
0052:  MOVLW  DC
0053:  BCF    03.5
0054:  MOVWF  22
....................  
.................... while(true) 
.................... { 
....................  
.................... if(bit_test(portA,0)==1) 
0055:  BTFSS  05.0
0056:  GOTO   10F
.................... { 
....................   switch(i) 
0057:  MOVF   21,W
0058:  ADDLW  F7
0059:  BTFSC  03.0
005A:  GOTO   10F
005B:  ADDLW  09
005C:  GOTO   1EC
....................   { 
....................     case 0: 
....................            output_b(miDisplay[i]); 
005D:  MOVF   21,W
005E:  CALL   004
005F:  MOVWF  23
0060:  BSF    03.5
0061:  CLRF   06
0062:  BCF    03.5
0063:  MOVF   23,W
0064:  MOVWF  06
....................            output_c(0x00); 
0065:  MOVLW  00
0066:  MOVWF  20
0067:  BSF    03.5
0068:  CLRF   07
0069:  BCF    03.5
006A:  CLRF   07
....................            delay_ms(Tiempo); 
006B:  MOVF   22,W
006C:  MOVWF  23
006D:  CALL   012
....................            
....................            i++; 
006E:  INCF   21,F
....................     break; 
006F:  GOTO   10F
....................     case 1: 
....................            output_b(miDisplay[i]); 
0070:  MOVF   21,W
0071:  CALL   004
0072:  MOVWF  23
0073:  BSF    03.5
0074:  CLRF   06
0075:  BCF    03.5
0076:  MOVF   23,W
0077:  MOVWF  06
....................            output_c(0b01000000); 
0078:  MOVLW  00
0079:  MOVWF  20
007A:  BSF    03.5
007B:  CLRF   07
007C:  MOVLW  40
007D:  BCF    03.5
007E:  MOVWF  07
....................          delay_ms(Tiempo); 
007F:  MOVF   22,W
0080:  MOVWF  23
0081:  CALL   012
....................             
....................            i++; 
0082:  INCF   21,F
....................     break; 
0083:  GOTO   10F
....................     case 2: 
....................            output_b(miDisplay[i]); 
0084:  MOVF   21,W
0085:  CALL   004
0086:  MOVWF  23
0087:  BSF    03.5
0088:  CLRF   06
0089:  BCF    03.5
008A:  MOVF   23,W
008B:  MOVWF  06
....................            output_c(0b00100000); 
008C:  MOVLW  00
008D:  MOVWF  20
008E:  BSF    03.5
008F:  CLRF   07
0090:  MOVLW  20
0091:  BCF    03.5
0092:  MOVWF  07
....................            delay_ms(Tiempo); 
0093:  MOVF   22,W
0094:  MOVWF  23
0095:  CALL   012
....................            i++; 
0096:  INCF   21,F
....................     break; 
0097:  GOTO   10F
....................     case 3: 
....................            output_b(miDisplay[i]); 
0098:  MOVF   21,W
0099:  CALL   004
009A:  MOVWF  23
009B:  BSF    03.5
009C:  CLRF   06
009D:  BCF    03.5
009E:  MOVF   23,W
009F:  MOVWF  06
....................            output_c(0b00010000); 
00A0:  MOVLW  00
00A1:  MOVWF  20
00A2:  BSF    03.5
00A3:  CLRF   07
00A4:  MOVLW  10
00A5:  BCF    03.5
00A6:  MOVWF  07
....................            delay_ms(Tiempo); 
00A7:  MOVF   22,W
00A8:  MOVWF  23
00A9:  CALL   012
....................            i++; 
00AA:  INCF   21,F
....................     break; 
00AB:  GOTO   10F
....................     case 4: 
....................            output_b(miDisplay[i]); 
00AC:  MOVF   21,W
00AD:  CALL   004
00AE:  MOVWF  23
00AF:  BSF    03.5
00B0:  CLRF   06
00B1:  BCF    03.5
00B2:  MOVF   23,W
00B3:  MOVWF  06
....................            output_c(0b00010000); 
00B4:  MOVLW  00
00B5:  MOVWF  20
00B6:  BSF    03.5
00B7:  CLRF   07
00B8:  MOVLW  10
00B9:  BCF    03.5
00BA:  MOVWF  07
....................            delay_ms(Tiempo); 
00BB:  MOVF   22,W
00BC:  MOVWF  23
00BD:  CALL   012
....................            i++; 
00BE:  INCF   21,F
....................     break; 
00BF:  GOTO   10F
....................     case 5: 
....................            output_b(miDisplay[i]); 
00C0:  MOVF   21,W
00C1:  CALL   004
00C2:  MOVWF  23
00C3:  BSF    03.5
00C4:  CLRF   06
00C5:  BCF    03.5
00C6:  MOVF   23,W
00C7:  MOVWF  06
....................            output_c(0b00001000); 
00C8:  MOVLW  00
00C9:  MOVWF  20
00CA:  BSF    03.5
00CB:  CLRF   07
00CC:  MOVLW  08
00CD:  BCF    03.5
00CE:  MOVWF  07
....................           delay_ms(Tiempo); 
00CF:  MOVF   22,W
00D0:  MOVWF  23
00D1:  CALL   012
....................            i++; 
00D2:  INCF   21,F
....................     break; 
00D3:  GOTO   10F
....................       case 6: 
....................            output_b(miDisplay[i]); 
00D4:  MOVF   21,W
00D5:  CALL   004
00D6:  MOVWF  23
00D7:  BSF    03.5
00D8:  CLRF   06
00D9:  BCF    03.5
00DA:  MOVF   23,W
00DB:  MOVWF  06
....................             output_c(0b00000100); 
00DC:  MOVLW  00
00DD:  MOVWF  20
00DE:  BSF    03.5
00DF:  CLRF   07
00E0:  MOVLW  04
00E1:  BCF    03.5
00E2:  MOVWF  07
....................            delay_ms(Tiempo); 
00E3:  MOVF   22,W
00E4:  MOVWF  23
00E5:  CALL   012
....................            i++; 
00E6:  INCF   21,F
....................     break; 
00E7:  GOTO   10F
....................      
....................       case 7: 
....................            output_b(miDisplay[i]); 
00E8:  MOVF   21,W
00E9:  CALL   004
00EA:  MOVWF  23
00EB:  BSF    03.5
00EC:  CLRF   06
00ED:  BCF    03.5
00EE:  MOVF   23,W
00EF:  MOVWF  06
....................             output_c(0b00000010); 
00F0:  MOVLW  00
00F1:  MOVWF  20
00F2:  BSF    03.5
00F3:  CLRF   07
00F4:  MOVLW  02
00F5:  BCF    03.5
00F6:  MOVWF  07
....................            delay_ms(Tiempo); 
00F7:  MOVF   22,W
00F8:  MOVWF  23
00F9:  CALL   012
....................            i++; 
00FA:  INCF   21,F
....................     break; 
00FB:  GOTO   10F
....................      
....................      case 8: 
....................            output_b(miDisplay[i]); 
00FC:  MOVF   21,W
00FD:  CALL   004
00FE:  MOVWF  23
00FF:  BSF    03.5
0100:  CLRF   06
0101:  BCF    03.5
0102:  MOVF   23,W
0103:  MOVWF  06
....................             output_c(0b00000001); 
0104:  MOVLW  00
0105:  MOVWF  20
0106:  BSF    03.5
0107:  CLRF   07
0108:  MOVLW  01
0109:  BCF    03.5
010A:  MOVWF  07
....................            delay_ms(Tiempo); 
010B:  MOVF   22,W
010C:  MOVWF  23
010D:  CALL   012
....................            i++; 
010E:  INCF   21,F
....................     break; 
....................   } 
....................  
.................... } 
....................  
.................... if(bit_test(portA,1)==1) 
010F:  BTFSS  05.1
0110:  GOTO   1E6
.................... { 
....................  
.................... i--; 
0111:  DECF   21,F
....................  switch(i) 
0112:  MOVF   21,W
0113:  BTFSC  03.2
0114:  GOTO   12E
0115:  XORLW  01
0116:  BTFSC  03.2
0117:  GOTO   140
0118:  XORLW  03
0119:  BTFSC  03.2
011A:  GOTO   153
011B:  XORLW  01
011C:  BTFSC  03.2
011D:  GOTO   166
011E:  XORLW  07
011F:  BTFSC  03.2
0120:  GOTO   179
0121:  XORLW  01
0122:  BTFSC  03.2
0123:  GOTO   18C
0124:  XORLW  03
0125:  BTFSC  03.2
0126:  GOTO   19F
0127:  XORLW  01
0128:  BTFSC  03.2
0129:  GOTO   1B2
012A:  XORLW  0F
012B:  BTFSC  03.2
012C:  GOTO   1C5
012D:  GOTO   1D8
....................   { 
....................     case 0: 
....................            output_b(miDisplay[i]); 
012E:  MOVF   21,W
012F:  CALL   004
0130:  MOVWF  23
0131:  BSF    03.5
0132:  CLRF   06
0133:  BCF    03.5
0134:  MOVF   23,W
0135:  MOVWF  06
....................            output_c(0x00); 
0136:  MOVLW  00
0137:  MOVWF  20
0138:  BSF    03.5
0139:  CLRF   07
013A:  BCF    03.5
013B:  CLRF   07
....................            delay_ms(Tiempo); 
013C:  MOVF   22,W
013D:  MOVWF  23
013E:  CALL   012
....................            
....................          
....................     break; 
013F:  GOTO   1E6
....................     case 1: 
....................            output_b(miDisplay[i]); 
0140:  MOVF   21,W
0141:  CALL   004
0142:  MOVWF  23
0143:  BSF    03.5
0144:  CLRF   06
0145:  BCF    03.5
0146:  MOVF   23,W
0147:  MOVWF  06
....................            output_c(0b01000000); 
0148:  MOVLW  00
0149:  MOVWF  20
014A:  BSF    03.5
014B:  CLRF   07
014C:  MOVLW  40
014D:  BCF    03.5
014E:  MOVWF  07
....................            delay_ms(Tiempo); 
014F:  MOVF   22,W
0150:  MOVWF  23
0151:  CALL   012
....................             
....................           
....................     break; 
0152:  GOTO   1E6
....................     case 2: 
....................            output_b(miDisplay[i]); 
0153:  MOVF   21,W
0154:  CALL   004
0155:  MOVWF  23
0156:  BSF    03.5
0157:  CLRF   06
0158:  BCF    03.5
0159:  MOVF   23,W
015A:  MOVWF  06
....................            output_c(0b00100000); 
015B:  MOVLW  00
015C:  MOVWF  20
015D:  BSF    03.5
015E:  CLRF   07
015F:  MOVLW  20
0160:  BCF    03.5
0161:  MOVWF  07
....................          delay_ms(Tiempo); 
0162:  MOVF   22,W
0163:  MOVWF  23
0164:  CALL   012
....................           
....................     break; 
0165:  GOTO   1E6
....................     case 3: 
....................            output_b(miDisplay[i]); 
0166:  MOVF   21,W
0167:  CALL   004
0168:  MOVWF  23
0169:  BSF    03.5
016A:  CLRF   06
016B:  BCF    03.5
016C:  MOVF   23,W
016D:  MOVWF  06
....................            output_c(0b00010000); 
016E:  MOVLW  00
016F:  MOVWF  20
0170:  BSF    03.5
0171:  CLRF   07
0172:  MOVLW  10
0173:  BCF    03.5
0174:  MOVWF  07
....................            delay_ms(Tiempo); 
0175:  MOVF   22,W
0176:  MOVWF  23
0177:  CALL   012
....................            
....................     break; 
0178:  GOTO   1E6
....................     case 4: 
....................            output_b(miDisplay[i]); 
0179:  MOVF   21,W
017A:  CALL   004
017B:  MOVWF  23
017C:  BSF    03.5
017D:  CLRF   06
017E:  BCF    03.5
017F:  MOVF   23,W
0180:  MOVWF  06
....................            output_c(0b00010000); 
0181:  MOVLW  00
0182:  MOVWF  20
0183:  BSF    03.5
0184:  CLRF   07
0185:  MOVLW  10
0186:  BCF    03.5
0187:  MOVWF  07
....................           delay_ms(Tiempo); 
0188:  MOVF   22,W
0189:  MOVWF  23
018A:  CALL   012
....................        
....................     break; 
018B:  GOTO   1E6
....................     case 5: 
....................            output_b(miDisplay[i]); 
018C:  MOVF   21,W
018D:  CALL   004
018E:  MOVWF  23
018F:  BSF    03.5
0190:  CLRF   06
0191:  BCF    03.5
0192:  MOVF   23,W
0193:  MOVWF  06
....................            output_c(0b00001000); 
0194:  MOVLW  00
0195:  MOVWF  20
0196:  BSF    03.5
0197:  CLRF   07
0198:  MOVLW  08
0199:  BCF    03.5
019A:  MOVWF  07
....................            delay_ms(Tiempo); 
019B:  MOVF   22,W
019C:  MOVWF  23
019D:  CALL   012
....................         
....................     break; 
019E:  GOTO   1E6
....................       case 6: 
....................            output_b(miDisplay[i]); 
019F:  MOVF   21,W
01A0:  CALL   004
01A1:  MOVWF  23
01A2:  BSF    03.5
01A3:  CLRF   06
01A4:  BCF    03.5
01A5:  MOVF   23,W
01A6:  MOVWF  06
....................             output_c(0b00000100); 
01A7:  MOVLW  00
01A8:  MOVWF  20
01A9:  BSF    03.5
01AA:  CLRF   07
01AB:  MOVLW  04
01AC:  BCF    03.5
01AD:  MOVWF  07
....................            delay_ms(Tiempo); 
01AE:  MOVF   22,W
01AF:  MOVWF  23
01B0:  CALL   012
....................         
....................     break; 
01B1:  GOTO   1E6
....................      
....................       case 7: 
....................            output_b(miDisplay[i]); 
01B2:  MOVF   21,W
01B3:  CALL   004
01B4:  MOVWF  23
01B5:  BSF    03.5
01B6:  CLRF   06
01B7:  BCF    03.5
01B8:  MOVF   23,W
01B9:  MOVWF  06
....................             output_c(0b00000010); 
01BA:  MOVLW  00
01BB:  MOVWF  20
01BC:  BSF    03.5
01BD:  CLRF   07
01BE:  MOVLW  02
01BF:  BCF    03.5
01C0:  MOVWF  07
....................            delay_ms(Tiempo); 
01C1:  MOVF   22,W
01C2:  MOVWF  23
01C3:  CALL   012
....................         
....................     break; 
01C4:  GOTO   1E6
....................      
....................      case 8: 
....................            output_b(miDisplay[i]); 
01C5:  MOVF   21,W
01C6:  CALL   004
01C7:  MOVWF  23
01C8:  BSF    03.5
01C9:  CLRF   06
01CA:  BCF    03.5
01CB:  MOVF   23,W
01CC:  MOVWF  06
....................             output_c(0b00000001); 
01CD:  MOVLW  00
01CE:  MOVWF  20
01CF:  BSF    03.5
01D0:  CLRF   07
01D1:  MOVLW  01
01D2:  BCF    03.5
01D3:  MOVWF  07
....................            delay_ms(Tiempo); 
01D4:  MOVF   22,W
01D5:  MOVWF  23
01D6:  CALL   012
....................            
....................     break; 
01D7:  GOTO   1E6
....................      
....................     default: 
....................              output_b(miDisplay[0]); 
01D8:  BSF    03.5
01D9:  CLRF   06
01DA:  MOVLW  3F
01DB:  BCF    03.5
01DC:  MOVWF  06
....................             output_c(0x00); 
01DD:  MOVLW  00
01DE:  MOVWF  20
01DF:  BSF    03.5
01E0:  CLRF   07
01E1:  BCF    03.5
01E2:  CLRF   07
....................           delay_ms(Tiempo); 
01E3:  MOVF   22,W
01E4:  MOVWF  23
01E5:  CALL   012
....................     break; 
....................   } 
....................   
....................    
....................  
.................... } 
....................  
.................... if(i==9) 
01E6:  MOVF   21,W
01E7:  SUBLW  09
01E8:  BTFSC  03.2
.................... { 
....................   i=0; 
01E9:  CLRF   21
....................    
.................... } 
01EA:  GOTO   055
....................  
....................  
....................  
.................... } 
....................  
....................  
.................... } 
01EB:  SLEEP

Configuration Fuses:
   Word  1: 2CE1   XT NOWDT PUT MCLR NOPROTECT NOCPD NOBROWNOUT IESO FCMEN NOLVP NODEBUG
   Word  2: 3FFF   BORV40 NOWRT
