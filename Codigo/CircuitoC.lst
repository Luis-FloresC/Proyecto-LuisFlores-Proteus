CCS PCM C Compiler, Version 5.015, 5967               02-jul.-21 15:38

               Filename:   C:\Users\Luis Flores\Documents\II PERIODO 2021\MICROCONTROLADORES\Proyecto - Luis Flores\Codigo\CircuitoC.lst

               ROM used:   625 words (8%)
                           Largest free fragment is 2048
               RAM used:   7 (2%) at main() level
                           11 (3%) worst case
               Stack used: 1 locations
               Stack size: 8

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   035
0003:  NOP
.................... #include <16f886.h> 
.................... //////////// Standard Header file for the PIC16F886 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F886 
0004:  BCF    0A.0
0005:  BCF    0A.1
0006:  BCF    0A.2
0007:  ADDWF  02,F
0008:  RETLW  3F
0009:  RETLW  06
000A:  RETLW  5B
000B:  RETLW  4F
000C:  RETLW  66
000D:  RETLW  6D
000E:  RETLW  7D
000F:  RETLW  07
0010:  RETLW  7F
0011:  RETLW  6F
0012:  BCF    0A.0
0013:  BCF    0A.1
0014:  BCF    0A.2
0015:  ADDWF  02,F
0016:  RETLW  00
0017:  RETLW  80
0018:  RETLW  40
0019:  RETLW  20
001A:  RETLW  10
001B:  RETLW  08
001C:  RETLW  04
001D:  RETLW  02
001E:  RETLW  01
001F:  RETLW  00
*
0264:  BCF    0A.0
0265:  BSF    0A.1
0266:  BCF    0A.2
0267:  ADDWF  02,F
0268:  GOTO   06C
0269:  GOTO   085
026A:  GOTO   09E
026B:  GOTO   0B7
026C:  GOTO   0D0
026D:  GOTO   0E9
026E:  GOTO   102
026F:  GOTO   11B
0270:  GOTO   134
....................  
.................... #list 
....................  
.................... #Fuses XT,NOPROTECT,NOWDT,NOBROWNOUT,PUT,NOLVP       
.................... #use delay(clock= 4M) 
*
0020:  MOVLW  25
0021:  MOVWF  04
0022:  BCF    03.7
0023:  MOVF   00,W
0024:  BTFSC  03.2
0025:  GOTO   034
0026:  MOVLW  01
0027:  MOVWF  78
0028:  CLRF   77
0029:  DECFSZ 77,F
002A:  GOTO   029
002B:  DECFSZ 78,F
002C:  GOTO   028
002D:  MOVLW  4A
002E:  MOVWF  77
002F:  DECFSZ 77,F
0030:  GOTO   02F
0031:  GOTO   032
0032:  DECFSZ 00,F
0033:  GOTO   026
0034:  RETURN
.................... #byte portB = 0x06 
.................... #byte portA = 0x05 
.................... #byte tris_a = 0x85 
.................... #byte tris_b = 0x86 
....................  
.................... byte const miDisplay[10] = {0x3f,0x06,0x5b,0x4f,0x66,0x6d,0x7d,0x07,0x7f,0x6f}; 
.................... byte const miLeds[10] = {0x00,0x80,0x40,0x20,0x10,0x8,0x4,0x2,0x1}; 
.................... void main() 
0035:  MOVF   03,W
0036:  ANDLW  1F
0037:  MOVWF  03
0038:  MOVLW  FF
0039:  MOVWF  20
003A:  BSF    03.5
003B:  BSF    03.6
003C:  MOVF   09,W
003D:  ANDLW  C0
003E:  MOVWF  09
003F:  BCF    03.6
0040:  BCF    1F.4
0041:  BCF    1F.5
0042:  MOVLW  00
0043:  BSF    03.6
0044:  MOVWF  08
0045:  BCF    03.5
0046:  CLRF   07
0047:  CLRF   08
0048:  CLRF   09
0049:  BCF    03.7
.................... { 
....................  
.................... tris_b= 0x00; 
004A:  BSF    03.5
004B:  BCF    03.6
004C:  CLRF   06
.................... //tris_a = 0xFF; 
.................... portB = 0x00; 
004D:  BCF    03.5
004E:  CLRF   06
.................... bit_set(tris_a,0); 
004F:  BSF    03.5
0050:  BSF    05.0
.................... output_c(0x00); 
0051:  MOVLW  00
0052:  BCF    03.5
0053:  MOVWF  20
0054:  BSF    03.5
0055:  CLRF   07
0056:  BCF    03.5
0057:  CLRF   07
.................... int i=0; 
.................... int ant=0; 
0058:  CLRF   21
0059:  CLRF   22
.................... set_tris_c(0x00);  
005A:  BSF    03.5
005B:  MOVWF  07
005C:  BCF    03.5
005D:  MOVWF  20
.................... set_tris_a(0xFF); 
005E:  MOVLW  FF
005F:  BSF    03.5
0060:  MOVWF  05
.................... int Tiempo = 1500; 
0061:  MOVLW  DC
0062:  BCF    03.5
0063:  MOVWF  23
....................  
.................... while(true) 
.................... { 
....................  
.................... if(bit_test(portA,0)==1) 
0064:  BTFSS  05.0
0065:  GOTO   14C
.................... { 
....................   switch(i) 
0066:  MOVF   21,W
0067:  ADDLW  F7
0068:  BTFSC  03.0
0069:  GOTO   14C
006A:  ADDLW  09
006B:  GOTO   264
....................   { 
....................     case 0: 
....................            output_b(miDisplay[i]); 
006C:  MOVF   21,W
006D:  CALL   004
006E:  MOVWF  24
006F:  BSF    03.5
0070:  CLRF   06
0071:  BCF    03.5
0072:  MOVF   24,W
0073:  MOVWF  06
....................            output_c(miLeds[i]); 
0074:  MOVF   21,W
0075:  CALL   012
0076:  MOVWF  24
0077:  MOVLW  00
0078:  MOVWF  20
0079:  BSF    03.5
007A:  CLRF   07
007B:  BCF    03.5
007C:  MOVF   24,W
007D:  MOVWF  07
....................            delay_ms(Tiempo); 
007E:  MOVF   23,W
007F:  MOVWF  25
0080:  CALL   020
....................           ant = i; 
0081:  MOVF   21,W
0082:  MOVWF  22
....................            i++; 
0083:  INCF   21,F
....................     break; 
0084:  GOTO   14C
....................     case 1: 
....................            output_b(miDisplay[i]); 
0085:  MOVF   21,W
0086:  CALL   004
0087:  MOVWF  24
0088:  BSF    03.5
0089:  CLRF   06
008A:  BCF    03.5
008B:  MOVF   24,W
008C:  MOVWF  06
....................            output_c(miLeds[i]); 
008D:  MOVF   21,W
008E:  CALL   012
008F:  MOVWF  24
0090:  MOVLW  00
0091:  MOVWF  20
0092:  BSF    03.5
0093:  CLRF   07
0094:  BCF    03.5
0095:  MOVF   24,W
0096:  MOVWF  07
....................            delay_ms(Tiempo); 
0097:  MOVF   23,W
0098:  MOVWF  25
0099:  CALL   020
....................            ant = i; 
009A:  MOVF   21,W
009B:  MOVWF  22
....................            i++; 
009C:  INCF   21,F
....................     break; 
009D:  GOTO   14C
....................     case 2: 
....................            output_b(miDisplay[i]); 
009E:  MOVF   21,W
009F:  CALL   004
00A0:  MOVWF  24
00A1:  BSF    03.5
00A2:  CLRF   06
00A3:  BCF    03.5
00A4:  MOVF   24,W
00A5:  MOVWF  06
....................            output_c(miLeds[i]); 
00A6:  MOVF   21,W
00A7:  CALL   012
00A8:  MOVWF  24
00A9:  MOVLW  00
00AA:  MOVWF  20
00AB:  BSF    03.5
00AC:  CLRF   07
00AD:  BCF    03.5
00AE:  MOVF   24,W
00AF:  MOVWF  07
....................            delay_ms(Tiempo); 
00B0:  MOVF   23,W
00B1:  MOVWF  25
00B2:  CALL   020
....................            ant = i; 
00B3:  MOVF   21,W
00B4:  MOVWF  22
....................            i++; 
00B5:  INCF   21,F
....................     break; 
00B6:  GOTO   14C
....................     case 3: 
....................            output_b(miDisplay[i]); 
00B7:  MOVF   21,W
00B8:  CALL   004
00B9:  MOVWF  24
00BA:  BSF    03.5
00BB:  CLRF   06
00BC:  BCF    03.5
00BD:  MOVF   24,W
00BE:  MOVWF  06
....................            output_c(miLeds[i]); 
00BF:  MOVF   21,W
00C0:  CALL   012
00C1:  MOVWF  24
00C2:  MOVLW  00
00C3:  MOVWF  20
00C4:  BSF    03.5
00C5:  CLRF   07
00C6:  BCF    03.5
00C7:  MOVF   24,W
00C8:  MOVWF  07
....................            delay_ms(Tiempo); 
00C9:  MOVF   23,W
00CA:  MOVWF  25
00CB:  CALL   020
....................            ant = i; 
00CC:  MOVF   21,W
00CD:  MOVWF  22
....................            i++; 
00CE:  INCF   21,F
....................     break; 
00CF:  GOTO   14C
....................     case 4: 
....................            output_b(miDisplay[i]); 
00D0:  MOVF   21,W
00D1:  CALL   004
00D2:  MOVWF  24
00D3:  BSF    03.5
00D4:  CLRF   06
00D5:  BCF    03.5
00D6:  MOVF   24,W
00D7:  MOVWF  06
....................            output_c(miLeds[i]); 
00D8:  MOVF   21,W
00D9:  CALL   012
00DA:  MOVWF  24
00DB:  MOVLW  00
00DC:  MOVWF  20
00DD:  BSF    03.5
00DE:  CLRF   07
00DF:  BCF    03.5
00E0:  MOVF   24,W
00E1:  MOVWF  07
....................            delay_ms(Tiempo); 
00E2:  MOVF   23,W
00E3:  MOVWF  25
00E4:  CALL   020
....................            ant = i; 
00E5:  MOVF   21,W
00E6:  MOVWF  22
....................            i++; 
00E7:  INCF   21,F
....................     break; 
00E8:  GOTO   14C
....................     case 5: 
....................            output_b(miDisplay[i]); 
00E9:  MOVF   21,W
00EA:  CALL   004
00EB:  MOVWF  24
00EC:  BSF    03.5
00ED:  CLRF   06
00EE:  BCF    03.5
00EF:  MOVF   24,W
00F0:  MOVWF  06
....................            output_c(miLeds[i]); 
00F1:  MOVF   21,W
00F2:  CALL   012
00F3:  MOVWF  24
00F4:  MOVLW  00
00F5:  MOVWF  20
00F6:  BSF    03.5
00F7:  CLRF   07
00F8:  BCF    03.5
00F9:  MOVF   24,W
00FA:  MOVWF  07
....................           delay_ms(Tiempo); 
00FB:  MOVF   23,W
00FC:  MOVWF  25
00FD:  CALL   020
....................           ant = i; 
00FE:  MOVF   21,W
00FF:  MOVWF  22
....................            i++; 
0100:  INCF   21,F
....................     break; 
0101:  GOTO   14C
....................       case 6: 
....................            output_b(miDisplay[i]); 
0102:  MOVF   21,W
0103:  CALL   004
0104:  MOVWF  24
0105:  BSF    03.5
0106:  CLRF   06
0107:  BCF    03.5
0108:  MOVF   24,W
0109:  MOVWF  06
....................            output_c(miLeds[i]); 
010A:  MOVF   21,W
010B:  CALL   012
010C:  MOVWF  24
010D:  MOVLW  00
010E:  MOVWF  20
010F:  BSF    03.5
0110:  CLRF   07
0111:  BCF    03.5
0112:  MOVF   24,W
0113:  MOVWF  07
....................            delay_ms(Tiempo); 
0114:  MOVF   23,W
0115:  MOVWF  25
0116:  CALL   020
....................            ant = i; 
0117:  MOVF   21,W
0118:  MOVWF  22
....................            i++; 
0119:  INCF   21,F
....................     break; 
011A:  GOTO   14C
....................      
....................       case 7: 
....................            output_b(miDisplay[i]); 
011B:  MOVF   21,W
011C:  CALL   004
011D:  MOVWF  24
011E:  BSF    03.5
011F:  CLRF   06
0120:  BCF    03.5
0121:  MOVF   24,W
0122:  MOVWF  06
....................            output_c(miLeds[i]); 
0123:  MOVF   21,W
0124:  CALL   012
0125:  MOVWF  24
0126:  MOVLW  00
0127:  MOVWF  20
0128:  BSF    03.5
0129:  CLRF   07
012A:  BCF    03.5
012B:  MOVF   24,W
012C:  MOVWF  07
....................            delay_ms(Tiempo); 
012D:  MOVF   23,W
012E:  MOVWF  25
012F:  CALL   020
....................            ant = i; 
0130:  MOVF   21,W
0131:  MOVWF  22
....................            i++; 
0132:  INCF   21,F
....................     break; 
0133:  GOTO   14C
....................      
....................      case 8: 
....................            output_b(miDisplay[i]); 
0134:  MOVF   21,W
0135:  CALL   004
0136:  MOVWF  24
0137:  BSF    03.5
0138:  CLRF   06
0139:  BCF    03.5
013A:  MOVF   24,W
013B:  MOVWF  06
....................            output_c(miLeds[i]); 
013C:  MOVF   21,W
013D:  CALL   012
013E:  MOVWF  24
013F:  MOVLW  00
0140:  MOVWF  20
0141:  BSF    03.5
0142:  CLRF   07
0143:  BCF    03.5
0144:  MOVF   24,W
0145:  MOVWF  07
....................            delay_ms(Tiempo); 
0146:  MOVF   23,W
0147:  MOVWF  25
0148:  CALL   020
....................            ant = i; 
0149:  MOVF   21,W
014A:  MOVWF  22
....................            i++; 
014B:  INCF   21,F
....................     break; 
....................   } 
....................  
....................  
.................... } 
....................  
.................... if(bit_test(portA,1)==1) 
014C:  BTFSS  05.1
014D:  GOTO   254
.................... { 
.................... i = ant; 
014E:  MOVF   22,W
014F:  MOVWF  21
.................... i--; 
0150:  DECF   21,F
....................  switch(i) 
0151:  MOVF   21,W
0152:  BTFSC  03.2
0153:  GOTO   16D
0154:  XORLW  01
0155:  BTFSC  03.2
0156:  GOTO   185
0157:  XORLW  03
0158:  BTFSC  03.2
0159:  GOTO   19D
015A:  XORLW  01
015B:  BTFSC  03.2
015C:  GOTO   1B5
015D:  XORLW  07
015E:  BTFSC  03.2
015F:  GOTO   1CD
0160:  XORLW  01
0161:  BTFSC  03.2
0162:  GOTO   1E5
0163:  XORLW  03
0164:  BTFSC  03.2
0165:  GOTO   1FD
0166:  XORLW  01
0167:  BTFSC  03.2
0168:  GOTO   215
0169:  XORLW  0F
016A:  BTFSC  03.2
016B:  GOTO   22D
016C:  GOTO   245
....................   { 
....................     case 0: 
....................            output_b(miDisplay[i]); 
016D:  MOVF   21,W
016E:  CALL   004
016F:  MOVWF  24
0170:  BSF    03.5
0171:  CLRF   06
0172:  BCF    03.5
0173:  MOVF   24,W
0174:  MOVWF  06
....................            output_c(miLeds[i]); 
0175:  MOVF   21,W
0176:  CALL   012
0177:  MOVWF  24
0178:  MOVLW  00
0179:  MOVWF  20
017A:  BSF    03.5
017B:  CLRF   07
017C:  BCF    03.5
017D:  MOVF   24,W
017E:  MOVWF  07
....................            delay_ms(Tiempo); 
017F:  MOVF   23,W
0180:  MOVWF  25
0181:  CALL   020
....................             ant = i; 
0182:  MOVF   21,W
0183:  MOVWF  22
....................          
....................     break; 
0184:  GOTO   254
....................     case 1: 
....................            output_b(miDisplay[i]); 
0185:  MOVF   21,W
0186:  CALL   004
0187:  MOVWF  24
0188:  BSF    03.5
0189:  CLRF   06
018A:  BCF    03.5
018B:  MOVF   24,W
018C:  MOVWF  06
....................            output_c(miLeds[i]); 
018D:  MOVF   21,W
018E:  CALL   012
018F:  MOVWF  24
0190:  MOVLW  00
0191:  MOVWF  20
0192:  BSF    03.5
0193:  CLRF   07
0194:  BCF    03.5
0195:  MOVF   24,W
0196:  MOVWF  07
....................            delay_ms(Tiempo); 
0197:  MOVF   23,W
0198:  MOVWF  25
0199:  CALL   020
....................            ant = i; 
019A:  MOVF   21,W
019B:  MOVWF  22
....................           
....................     break; 
019C:  GOTO   254
....................     case 2: 
....................            output_b(miDisplay[i]); 
019D:  MOVF   21,W
019E:  CALL   004
019F:  MOVWF  24
01A0:  BSF    03.5
01A1:  CLRF   06
01A2:  BCF    03.5
01A3:  MOVF   24,W
01A4:  MOVWF  06
....................            output_c(miLeds[i]); 
01A5:  MOVF   21,W
01A6:  CALL   012
01A7:  MOVWF  24
01A8:  MOVLW  00
01A9:  MOVWF  20
01AA:  BSF    03.5
01AB:  CLRF   07
01AC:  BCF    03.5
01AD:  MOVF   24,W
01AE:  MOVWF  07
....................            delay_ms(Tiempo); 
01AF:  MOVF   23,W
01B0:  MOVWF  25
01B1:  CALL   020
....................            ant = i; 
01B2:  MOVF   21,W
01B3:  MOVWF  22
....................     break; 
01B4:  GOTO   254
....................     case 3: 
....................            output_b(miDisplay[i]); 
01B5:  MOVF   21,W
01B6:  CALL   004
01B7:  MOVWF  24
01B8:  BSF    03.5
01B9:  CLRF   06
01BA:  BCF    03.5
01BB:  MOVF   24,W
01BC:  MOVWF  06
....................            output_c(miLeds[i]); 
01BD:  MOVF   21,W
01BE:  CALL   012
01BF:  MOVWF  24
01C0:  MOVLW  00
01C1:  MOVWF  20
01C2:  BSF    03.5
01C3:  CLRF   07
01C4:  BCF    03.5
01C5:  MOVF   24,W
01C6:  MOVWF  07
....................            delay_ms(Tiempo); 
01C7:  MOVF   23,W
01C8:  MOVWF  25
01C9:  CALL   020
....................            ant = i; 
01CA:  MOVF   21,W
01CB:  MOVWF  22
....................     break; 
01CC:  GOTO   254
....................     case 4: 
....................            output_b(miDisplay[i]); 
01CD:  MOVF   21,W
01CE:  CALL   004
01CF:  MOVWF  24
01D0:  BSF    03.5
01D1:  CLRF   06
01D2:  BCF    03.5
01D3:  MOVF   24,W
01D4:  MOVWF  06
....................            output_c(miLeds[i]); 
01D5:  MOVF   21,W
01D6:  CALL   012
01D7:  MOVWF  24
01D8:  MOVLW  00
01D9:  MOVWF  20
01DA:  BSF    03.5
01DB:  CLRF   07
01DC:  BCF    03.5
01DD:  MOVF   24,W
01DE:  MOVWF  07
....................           delay_ms(Tiempo); 
01DF:  MOVF   23,W
01E0:  MOVWF  25
01E1:  CALL   020
....................            ant = i; 
01E2:  MOVF   21,W
01E3:  MOVWF  22
....................     break; 
01E4:  GOTO   254
....................     case 5: 
....................            output_b(miDisplay[i]); 
01E5:  MOVF   21,W
01E6:  CALL   004
01E7:  MOVWF  24
01E8:  BSF    03.5
01E9:  CLRF   06
01EA:  BCF    03.5
01EB:  MOVF   24,W
01EC:  MOVWF  06
....................            output_c(miLeds[i]); 
01ED:  MOVF   21,W
01EE:  CALL   012
01EF:  MOVWF  24
01F0:  MOVLW  00
01F1:  MOVWF  20
01F2:  BSF    03.5
01F3:  CLRF   07
01F4:  BCF    03.5
01F5:  MOVF   24,W
01F6:  MOVWF  07
....................            delay_ms(Tiempo); 
01F7:  MOVF   23,W
01F8:  MOVWF  25
01F9:  CALL   020
....................             ant = i; 
01FA:  MOVF   21,W
01FB:  MOVWF  22
....................     break; 
01FC:  GOTO   254
....................       case 6: 
....................            output_b(miDisplay[i]); 
01FD:  MOVF   21,W
01FE:  CALL   004
01FF:  MOVWF  24
0200:  BSF    03.5
0201:  CLRF   06
0202:  BCF    03.5
0203:  MOVF   24,W
0204:  MOVWF  06
....................            output_c(miLeds[i]); 
0205:  MOVF   21,W
0206:  CALL   012
0207:  MOVWF  24
0208:  MOVLW  00
0209:  MOVWF  20
020A:  BSF    03.5
020B:  CLRF   07
020C:  BCF    03.5
020D:  MOVF   24,W
020E:  MOVWF  07
....................            delay_ms(Tiempo); 
020F:  MOVF   23,W
0210:  MOVWF  25
0211:  CALL   020
....................             ant = i; 
0212:  MOVF   21,W
0213:  MOVWF  22
....................     break; 
0214:  GOTO   254
....................      
....................       case 7: 
....................            output_b(miDisplay[i]); 
0215:  MOVF   21,W
0216:  CALL   004
0217:  MOVWF  24
0218:  BSF    03.5
0219:  CLRF   06
021A:  BCF    03.5
021B:  MOVF   24,W
021C:  MOVWF  06
....................            output_c(miLeds[i]); 
021D:  MOVF   21,W
021E:  CALL   012
021F:  MOVWF  24
0220:  MOVLW  00
0221:  MOVWF  20
0222:  BSF    03.5
0223:  CLRF   07
0224:  BCF    03.5
0225:  MOVF   24,W
0226:  MOVWF  07
....................            delay_ms(Tiempo); 
0227:  MOVF   23,W
0228:  MOVWF  25
0229:  CALL   020
....................             ant = i; 
022A:  MOVF   21,W
022B:  MOVWF  22
....................     break; 
022C:  GOTO   254
....................      
....................      case 8: 
....................            output_b(miDisplay[i]); 
022D:  MOVF   21,W
022E:  CALL   004
022F:  MOVWF  24
0230:  BSF    03.5
0231:  CLRF   06
0232:  BCF    03.5
0233:  MOVF   24,W
0234:  MOVWF  06
....................            output_c(miLeds[i]); 
0235:  MOVF   21,W
0236:  CALL   012
0237:  MOVWF  24
0238:  MOVLW  00
0239:  MOVWF  20
023A:  BSF    03.5
023B:  CLRF   07
023C:  BCF    03.5
023D:  MOVF   24,W
023E:  MOVWF  07
....................            delay_ms(Tiempo); 
023F:  MOVF   23,W
0240:  MOVWF  25
0241:  CALL   020
....................            ant = i; 
0242:  MOVF   21,W
0243:  MOVWF  22
....................     break; 
0244:  GOTO   254
....................      
....................     default: 
....................              output_b(miDisplay[0]); 
0245:  BSF    03.5
0246:  CLRF   06
0247:  MOVLW  3F
0248:  BCF    03.5
0249:  MOVWF  06
....................             output_c(0x00); 
024A:  MOVLW  00
024B:  MOVWF  20
024C:  BSF    03.5
024D:  CLRF   07
024E:  BCF    03.5
024F:  CLRF   07
....................           delay_ms(Tiempo); 
0250:  MOVF   23,W
0251:  MOVWF  25
0252:  CALL   020
....................            ant = 0; 
0253:  CLRF   22
....................     break; 
....................   } 
....................   
....................    
....................  
.................... } 
....................  
....................  
.................... if(i==9 || i <= 0 ) 
0254:  MOVF   21,W
0255:  SUBLW  09
0256:  BTFSC  03.2
0257:  GOTO   25A
0258:  MOVF   21,F
0259:  BTFSC  03.2
.................... { 
....................   i=0; 
025A:  CLRF   21
....................    
.................... } 
....................  
....................  
.................... delay_ms(500); 
025B:  MOVLW  02
025C:  MOVWF  24
025D:  MOVLW  FA
025E:  MOVWF  25
025F:  CALL   020
0260:  DECFSZ 24,F
0261:  GOTO   25D
0262:  GOTO   064
.................... } 
....................  
....................  
.................... } 
0263:  SLEEP

Configuration Fuses:
   Word  1: 2CE1   XT NOWDT PUT MCLR NOPROTECT NOCPD NOBROWNOUT IESO FCMEN NOLVP NODEBUG
   Word  2: 3FFF   BORV40 NOWRT
