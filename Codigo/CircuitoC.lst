CCS PCM C Compiler, Version 5.015, 5967               01-jul.-21 08:45

               Filename:   C:\Users\Luis Flores\Documents\II PERIODO 2021\MICROCONTROLADORES\Proyecto - Luis Flores\Codigo\CircuitoC.lst

               ROM used:   555 words (7%)
                           Largest free fragment is 2048
               RAM used:   7 (2%) at main() level
                           11 (3%) worst case
               Stack used: 1 locations
               Stack size: 8

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   027
0003:  NOP
.................... #include <16f886.h> 
.................... //////////// Standard Header file for the PIC16F886 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F886 
0004:  BCF    0A.0
0005:  BCF    0A.1
0006:  BCF    0A.2
0007:  ADDWF  02,F
0008:  RETLW  3F
0009:  RETLW  06
000A:  RETLW  5B
000B:  RETLW  4F
000C:  RETLW  66
000D:  RETLW  6D
000E:  RETLW  7D
000F:  RETLW  07
0010:  RETLW  7F
0011:  RETLW  6F
*
021E:  BCF    0A.0
021F:  BSF    0A.1
0220:  BCF    0A.2
0221:  ADDWF  02,F
0222:  GOTO   05E
0223:  GOTO   073
0224:  GOTO   089
0225:  GOTO   09F
0226:  GOTO   0B5
0227:  GOTO   0CB
0228:  GOTO   0E1
0229:  GOTO   0F7
022A:  GOTO   10D
....................  
.................... #list 
....................  
.................... #Fuses XT,NOPROTECT,NOWDT,NOBROWNOUT,PUT,NOLVP       
.................... #use delay(clock= 4M) 
*
0012:  MOVLW  25
0013:  MOVWF  04
0014:  BCF    03.7
0015:  MOVF   00,W
0016:  BTFSC  03.2
0017:  GOTO   026
0018:  MOVLW  01
0019:  MOVWF  78
001A:  CLRF   77
001B:  DECFSZ 77,F
001C:  GOTO   01B
001D:  DECFSZ 78,F
001E:  GOTO   01A
001F:  MOVLW  4A
0020:  MOVWF  77
0021:  DECFSZ 77,F
0022:  GOTO   021
0023:  GOTO   024
0024:  DECFSZ 00,F
0025:  GOTO   018
0026:  RETURN
.................... #byte portB = 0x06 
.................... #byte portA = 0x05 
.................... #byte tris_a = 0x85 
.................... #byte tris_b = 0x86 
....................  
.................... byte const miDisplay[10] = {0x3f,0x06,0x5b,0x4f,0x66,0x6d,0x7d,0x07,0x7f,0x6f}; 
....................  
.................... void main() 
0027:  MOVF   03,W
0028:  ANDLW  1F
0029:  MOVWF  03
002A:  MOVLW  FF
002B:  MOVWF  20
002C:  BSF    03.5
002D:  BSF    03.6
002E:  MOVF   09,W
002F:  ANDLW  C0
0030:  MOVWF  09
0031:  BCF    03.6
0032:  BCF    1F.4
0033:  BCF    1F.5
0034:  MOVLW  00
0035:  BSF    03.6
0036:  MOVWF  08
0037:  BCF    03.5
0038:  CLRF   07
0039:  CLRF   08
003A:  CLRF   09
003B:  BCF    03.7
.................... { 
....................  
.................... tris_b= 0x00; 
003C:  BSF    03.5
003D:  BCF    03.6
003E:  CLRF   06
.................... //tris_a = 0xFF; 
.................... portB = 0x00; 
003F:  BCF    03.5
0040:  CLRF   06
.................... bit_set(tris_a,0); 
0041:  BSF    03.5
0042:  BSF    05.0
.................... output_c(0x00); 
0043:  MOVLW  00
0044:  BCF    03.5
0045:  MOVWF  20
0046:  BSF    03.5
0047:  CLRF   07
0048:  BCF    03.5
0049:  CLRF   07
.................... int i=0; 
.................... int ant=0; 
004A:  CLRF   21
004B:  CLRF   22
.................... set_tris_c(0x00);  
004C:  BSF    03.5
004D:  MOVWF  07
004E:  BCF    03.5
004F:  MOVWF  20
.................... set_tris_a(0xFF); 
0050:  MOVLW  FF
0051:  BSF    03.5
0052:  MOVWF  05
.................... int Tiempo = 1500; 
0053:  MOVLW  DC
0054:  BCF    03.5
0055:  MOVWF  23
....................  
.................... while(true) 
.................... { 
....................  
.................... if(bit_test(portA,0)==1) 
0056:  BTFSS  05.0
0057:  GOTO   122
.................... { 
....................   switch(i) 
0058:  MOVF   21,W
0059:  ADDLW  F7
005A:  BTFSC  03.0
005B:  GOTO   122
005C:  ADDLW  09
005D:  GOTO   21E
....................   { 
....................     case 0: 
....................            output_b(miDisplay[i]); 
005E:  MOVF   21,W
005F:  CALL   004
0060:  MOVWF  24
0061:  BSF    03.5
0062:  CLRF   06
0063:  BCF    03.5
0064:  MOVF   24,W
0065:  MOVWF  06
....................            output_c(0x00); 
0066:  MOVLW  00
0067:  MOVWF  20
0068:  BSF    03.5
0069:  CLRF   07
006A:  BCF    03.5
006B:  CLRF   07
....................            delay_ms(Tiempo); 
006C:  MOVF   23,W
006D:  MOVWF  25
006E:  CALL   012
....................           ant = i; 
006F:  MOVF   21,W
0070:  MOVWF  22
....................            i++; 
0071:  INCF   21,F
....................     break; 
0072:  GOTO   122
....................     case 1: 
....................            output_b(miDisplay[i]); 
0073:  MOVF   21,W
0074:  CALL   004
0075:  MOVWF  24
0076:  BSF    03.5
0077:  CLRF   06
0078:  BCF    03.5
0079:  MOVF   24,W
007A:  MOVWF  06
....................            output_c(0b01000000); 
007B:  MOVLW  00
007C:  MOVWF  20
007D:  BSF    03.5
007E:  CLRF   07
007F:  MOVLW  40
0080:  BCF    03.5
0081:  MOVWF  07
....................          delay_ms(Tiempo); 
0082:  MOVF   23,W
0083:  MOVWF  25
0084:  CALL   012
....................            ant = i; 
0085:  MOVF   21,W
0086:  MOVWF  22
....................            i++; 
0087:  INCF   21,F
....................     break; 
0088:  GOTO   122
....................     case 2: 
....................            output_b(miDisplay[i]); 
0089:  MOVF   21,W
008A:  CALL   004
008B:  MOVWF  24
008C:  BSF    03.5
008D:  CLRF   06
008E:  BCF    03.5
008F:  MOVF   24,W
0090:  MOVWF  06
....................            output_c(0b00100000); 
0091:  MOVLW  00
0092:  MOVWF  20
0093:  BSF    03.5
0094:  CLRF   07
0095:  MOVLW  20
0096:  BCF    03.5
0097:  MOVWF  07
....................            delay_ms(Tiempo); 
0098:  MOVF   23,W
0099:  MOVWF  25
009A:  CALL   012
....................            ant = i; 
009B:  MOVF   21,W
009C:  MOVWF  22
....................            i++; 
009D:  INCF   21,F
....................     break; 
009E:  GOTO   122
....................     case 3: 
....................            output_b(miDisplay[i]); 
009F:  MOVF   21,W
00A0:  CALL   004
00A1:  MOVWF  24
00A2:  BSF    03.5
00A3:  CLRF   06
00A4:  BCF    03.5
00A5:  MOVF   24,W
00A6:  MOVWF  06
....................            output_c(0b00010000); 
00A7:  MOVLW  00
00A8:  MOVWF  20
00A9:  BSF    03.5
00AA:  CLRF   07
00AB:  MOVLW  10
00AC:  BCF    03.5
00AD:  MOVWF  07
....................            delay_ms(Tiempo); 
00AE:  MOVF   23,W
00AF:  MOVWF  25
00B0:  CALL   012
....................            ant = i; 
00B1:  MOVF   21,W
00B2:  MOVWF  22
....................            i++; 
00B3:  INCF   21,F
....................     break; 
00B4:  GOTO   122
....................     case 4: 
....................            output_b(miDisplay[i]); 
00B5:  MOVF   21,W
00B6:  CALL   004
00B7:  MOVWF  24
00B8:  BSF    03.5
00B9:  CLRF   06
00BA:  BCF    03.5
00BB:  MOVF   24,W
00BC:  MOVWF  06
....................            output_c(0b00010000); 
00BD:  MOVLW  00
00BE:  MOVWF  20
00BF:  BSF    03.5
00C0:  CLRF   07
00C1:  MOVLW  10
00C2:  BCF    03.5
00C3:  MOVWF  07
....................            delay_ms(Tiempo); 
00C4:  MOVF   23,W
00C5:  MOVWF  25
00C6:  CALL   012
....................            ant = i; 
00C7:  MOVF   21,W
00C8:  MOVWF  22
....................            i++; 
00C9:  INCF   21,F
....................     break; 
00CA:  GOTO   122
....................     case 5: 
....................            output_b(miDisplay[i]); 
00CB:  MOVF   21,W
00CC:  CALL   004
00CD:  MOVWF  24
00CE:  BSF    03.5
00CF:  CLRF   06
00D0:  BCF    03.5
00D1:  MOVF   24,W
00D2:  MOVWF  06
....................            output_c(0b00001000); 
00D3:  MOVLW  00
00D4:  MOVWF  20
00D5:  BSF    03.5
00D6:  CLRF   07
00D7:  MOVLW  08
00D8:  BCF    03.5
00D9:  MOVWF  07
....................           delay_ms(Tiempo); 
00DA:  MOVF   23,W
00DB:  MOVWF  25
00DC:  CALL   012
....................           ant = i; 
00DD:  MOVF   21,W
00DE:  MOVWF  22
....................            i++; 
00DF:  INCF   21,F
....................     break; 
00E0:  GOTO   122
....................       case 6: 
....................            output_b(miDisplay[i]); 
00E1:  MOVF   21,W
00E2:  CALL   004
00E3:  MOVWF  24
00E4:  BSF    03.5
00E5:  CLRF   06
00E6:  BCF    03.5
00E7:  MOVF   24,W
00E8:  MOVWF  06
....................             output_c(0b00000100); 
00E9:  MOVLW  00
00EA:  MOVWF  20
00EB:  BSF    03.5
00EC:  CLRF   07
00ED:  MOVLW  04
00EE:  BCF    03.5
00EF:  MOVWF  07
....................            delay_ms(Tiempo); 
00F0:  MOVF   23,W
00F1:  MOVWF  25
00F2:  CALL   012
....................            ant = i; 
00F3:  MOVF   21,W
00F4:  MOVWF  22
....................            i++; 
00F5:  INCF   21,F
....................     break; 
00F6:  GOTO   122
....................      
....................       case 7: 
....................            output_b(miDisplay[i]); 
00F7:  MOVF   21,W
00F8:  CALL   004
00F9:  MOVWF  24
00FA:  BSF    03.5
00FB:  CLRF   06
00FC:  BCF    03.5
00FD:  MOVF   24,W
00FE:  MOVWF  06
....................             output_c(0b00000010); 
00FF:  MOVLW  00
0100:  MOVWF  20
0101:  BSF    03.5
0102:  CLRF   07
0103:  MOVLW  02
0104:  BCF    03.5
0105:  MOVWF  07
....................            delay_ms(Tiempo); 
0106:  MOVF   23,W
0107:  MOVWF  25
0108:  CALL   012
....................            ant = i; 
0109:  MOVF   21,W
010A:  MOVWF  22
....................            i++; 
010B:  INCF   21,F
....................     break; 
010C:  GOTO   122
....................      
....................      case 8: 
....................            output_b(miDisplay[i]); 
010D:  MOVF   21,W
010E:  CALL   004
010F:  MOVWF  24
0110:  BSF    03.5
0111:  CLRF   06
0112:  BCF    03.5
0113:  MOVF   24,W
0114:  MOVWF  06
....................             output_c(0b00000001); 
0115:  MOVLW  00
0116:  MOVWF  20
0117:  BSF    03.5
0118:  CLRF   07
0119:  MOVLW  01
011A:  BCF    03.5
011B:  MOVWF  07
....................            delay_ms(Tiempo); 
011C:  MOVF   23,W
011D:  MOVWF  25
011E:  CALL   012
....................            ant = i; 
011F:  MOVF   21,W
0120:  MOVWF  22
....................            i++; 
0121:  INCF   21,F
....................     break; 
....................   } 
....................  
....................  
.................... } 
....................  
.................... if(bit_test(portA,1)==1) 
0122:  BTFSS  05.1
0123:  GOTO   20E
.................... { 
.................... i = ant; 
0124:  MOVF   22,W
0125:  MOVWF  21
.................... i--; 
0126:  DECF   21,F
....................  switch(i) 
0127:  MOVF   21,W
0128:  BTFSC  03.2
0129:  GOTO   143
012A:  XORLW  01
012B:  BTFSC  03.2
012C:  GOTO   157
012D:  XORLW  03
012E:  BTFSC  03.2
012F:  GOTO   16C
0130:  XORLW  01
0131:  BTFSC  03.2
0132:  GOTO   181
0133:  XORLW  07
0134:  BTFSC  03.2
0135:  GOTO   196
0136:  XORLW  01
0137:  BTFSC  03.2
0138:  GOTO   1AB
0139:  XORLW  03
013A:  BTFSC  03.2
013B:  GOTO   1C0
013C:  XORLW  01
013D:  BTFSC  03.2
013E:  GOTO   1D5
013F:  XORLW  0F
0140:  BTFSC  03.2
0141:  GOTO   1EA
0142:  GOTO   1FF
....................   { 
....................     case 0: 
....................            output_b(miDisplay[i]); 
0143:  MOVF   21,W
0144:  CALL   004
0145:  MOVWF  24
0146:  BSF    03.5
0147:  CLRF   06
0148:  BCF    03.5
0149:  MOVF   24,W
014A:  MOVWF  06
....................            output_c(0x00); 
014B:  MOVLW  00
014C:  MOVWF  20
014D:  BSF    03.5
014E:  CLRF   07
014F:  BCF    03.5
0150:  CLRF   07
....................            delay_ms(Tiempo); 
0151:  MOVF   23,W
0152:  MOVWF  25
0153:  CALL   012
....................             ant = i; 
0154:  MOVF   21,W
0155:  MOVWF  22
....................          
....................     break; 
0156:  GOTO   20E
....................     case 1: 
....................            output_b(miDisplay[i]); 
0157:  MOVF   21,W
0158:  CALL   004
0159:  MOVWF  24
015A:  BSF    03.5
015B:  CLRF   06
015C:  BCF    03.5
015D:  MOVF   24,W
015E:  MOVWF  06
....................            output_c(0b01000000); 
015F:  MOVLW  00
0160:  MOVWF  20
0161:  BSF    03.5
0162:  CLRF   07
0163:  MOVLW  40
0164:  BCF    03.5
0165:  MOVWF  07
....................            delay_ms(Tiempo); 
0166:  MOVF   23,W
0167:  MOVWF  25
0168:  CALL   012
....................             ant = i; 
0169:  MOVF   21,W
016A:  MOVWF  22
....................           
....................     break; 
016B:  GOTO   20E
....................     case 2: 
....................            output_b(miDisplay[i]); 
016C:  MOVF   21,W
016D:  CALL   004
016E:  MOVWF  24
016F:  BSF    03.5
0170:  CLRF   06
0171:  BCF    03.5
0172:  MOVF   24,W
0173:  MOVWF  06
....................            output_c(0b00100000); 
0174:  MOVLW  00
0175:  MOVWF  20
0176:  BSF    03.5
0177:  CLRF   07
0178:  MOVLW  20
0179:  BCF    03.5
017A:  MOVWF  07
....................          delay_ms(Tiempo); 
017B:  MOVF   23,W
017C:  MOVWF  25
017D:  CALL   012
....................           ant = i; 
017E:  MOVF   21,W
017F:  MOVWF  22
....................     break; 
0180:  GOTO   20E
....................     case 3: 
....................            output_b(miDisplay[i]); 
0181:  MOVF   21,W
0182:  CALL   004
0183:  MOVWF  24
0184:  BSF    03.5
0185:  CLRF   06
0186:  BCF    03.5
0187:  MOVF   24,W
0188:  MOVWF  06
....................            output_c(0b00010000); 
0189:  MOVLW  00
018A:  MOVWF  20
018B:  BSF    03.5
018C:  CLRF   07
018D:  MOVLW  10
018E:  BCF    03.5
018F:  MOVWF  07
....................            delay_ms(Tiempo); 
0190:  MOVF   23,W
0191:  MOVWF  25
0192:  CALL   012
....................            ant = i; 
0193:  MOVF   21,W
0194:  MOVWF  22
....................     break; 
0195:  GOTO   20E
....................     case 4: 
....................            output_b(miDisplay[i]); 
0196:  MOVF   21,W
0197:  CALL   004
0198:  MOVWF  24
0199:  BSF    03.5
019A:  CLRF   06
019B:  BCF    03.5
019C:  MOVF   24,W
019D:  MOVWF  06
....................            output_c(0b00010000); 
019E:  MOVLW  00
019F:  MOVWF  20
01A0:  BSF    03.5
01A1:  CLRF   07
01A2:  MOVLW  10
01A3:  BCF    03.5
01A4:  MOVWF  07
....................           delay_ms(Tiempo); 
01A5:  MOVF   23,W
01A6:  MOVWF  25
01A7:  CALL   012
....................            ant = i; 
01A8:  MOVF   21,W
01A9:  MOVWF  22
....................     break; 
01AA:  GOTO   20E
....................     case 5: 
....................            output_b(miDisplay[i]); 
01AB:  MOVF   21,W
01AC:  CALL   004
01AD:  MOVWF  24
01AE:  BSF    03.5
01AF:  CLRF   06
01B0:  BCF    03.5
01B1:  MOVF   24,W
01B2:  MOVWF  06
....................            output_c(0b00001000); 
01B3:  MOVLW  00
01B4:  MOVWF  20
01B5:  BSF    03.5
01B6:  CLRF   07
01B7:  MOVLW  08
01B8:  BCF    03.5
01B9:  MOVWF  07
....................            delay_ms(Tiempo); 
01BA:  MOVF   23,W
01BB:  MOVWF  25
01BC:  CALL   012
....................             ant = i; 
01BD:  MOVF   21,W
01BE:  MOVWF  22
....................     break; 
01BF:  GOTO   20E
....................       case 6: 
....................            output_b(miDisplay[i]); 
01C0:  MOVF   21,W
01C1:  CALL   004
01C2:  MOVWF  24
01C3:  BSF    03.5
01C4:  CLRF   06
01C5:  BCF    03.5
01C6:  MOVF   24,W
01C7:  MOVWF  06
....................             output_c(0b00000100); 
01C8:  MOVLW  00
01C9:  MOVWF  20
01CA:  BSF    03.5
01CB:  CLRF   07
01CC:  MOVLW  04
01CD:  BCF    03.5
01CE:  MOVWF  07
....................            delay_ms(Tiempo); 
01CF:  MOVF   23,W
01D0:  MOVWF  25
01D1:  CALL   012
....................             ant = i; 
01D2:  MOVF   21,W
01D3:  MOVWF  22
....................     break; 
01D4:  GOTO   20E
....................      
....................       case 7: 
....................            output_b(miDisplay[i]); 
01D5:  MOVF   21,W
01D6:  CALL   004
01D7:  MOVWF  24
01D8:  BSF    03.5
01D9:  CLRF   06
01DA:  BCF    03.5
01DB:  MOVF   24,W
01DC:  MOVWF  06
....................             output_c(0b00000010); 
01DD:  MOVLW  00
01DE:  MOVWF  20
01DF:  BSF    03.5
01E0:  CLRF   07
01E1:  MOVLW  02
01E2:  BCF    03.5
01E3:  MOVWF  07
....................            delay_ms(Tiempo); 
01E4:  MOVF   23,W
01E5:  MOVWF  25
01E6:  CALL   012
....................             ant = i; 
01E7:  MOVF   21,W
01E8:  MOVWF  22
....................     break; 
01E9:  GOTO   20E
....................      
....................      case 8: 
....................            output_b(miDisplay[i]); 
01EA:  MOVF   21,W
01EB:  CALL   004
01EC:  MOVWF  24
01ED:  BSF    03.5
01EE:  CLRF   06
01EF:  BCF    03.5
01F0:  MOVF   24,W
01F1:  MOVWF  06
....................             output_c(0b00000001); 
01F2:  MOVLW  00
01F3:  MOVWF  20
01F4:  BSF    03.5
01F5:  CLRF   07
01F6:  MOVLW  01
01F7:  BCF    03.5
01F8:  MOVWF  07
....................            delay_ms(Tiempo); 
01F9:  MOVF   23,W
01FA:  MOVWF  25
01FB:  CALL   012
....................            ant = i; 
01FC:  MOVF   21,W
01FD:  MOVWF  22
....................     break; 
01FE:  GOTO   20E
....................      
....................     default: 
....................              output_b(miDisplay[0]); 
01FF:  BSF    03.5
0200:  CLRF   06
0201:  MOVLW  3F
0202:  BCF    03.5
0203:  MOVWF  06
....................             output_c(0x00); 
0204:  MOVLW  00
0205:  MOVWF  20
0206:  BSF    03.5
0207:  CLRF   07
0208:  BCF    03.5
0209:  CLRF   07
....................           delay_ms(Tiempo); 
020A:  MOVF   23,W
020B:  MOVWF  25
020C:  CALL   012
....................            ant = 0; 
020D:  CLRF   22
....................     break; 
....................   } 
....................   
....................    
....................  
.................... } 
....................  
....................  
.................... if(i==9 || i <= 0 ) 
020E:  MOVF   21,W
020F:  SUBLW  09
0210:  BTFSC  03.2
0211:  GOTO   214
0212:  MOVF   21,F
0213:  BTFSC  03.2
.................... { 
....................   i=0; 
0214:  CLRF   21
....................    
.................... } 
....................  
....................  
.................... delay_ms(500); 
0215:  MOVLW  02
0216:  MOVWF  24
0217:  MOVLW  FA
0218:  MOVWF  25
0219:  CALL   012
021A:  DECFSZ 24,F
021B:  GOTO   217
021C:  GOTO   056
.................... } 
....................  
....................  
.................... } 
021D:  SLEEP

Configuration Fuses:
   Word  1: 2CE1   XT NOWDT PUT MCLR NOPROTECT NOCPD NOBROWNOUT IESO FCMEN NOLVP NODEBUG
   Word  2: 3FFF   BORV40 NOWRT
